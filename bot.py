# bot.py
import telebot
from telebot import types
import json
import os
import time
import traceback

# ==========================
# ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
# ==========================
TOKEN = os.getenv("TELEGRAM_TOKEN")
print("TOKEN:", TOKEN)
if not TOKEN or ":" not in TOKEN:
    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: {TOKEN}")
ADMIN_ID = 279799183
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
USERS_FILE = os.path.join(BASE_DIR, "users.json")
RATES_FILE = os.path.join(BASE_DIR, "rates.json")
ADDRESSES_FILE = os.path.join(BASE_DIR, "addresses.json")
PAYMENTS_FILE = os.path.join(BASE_DIR, "payments.json")

# –ö–∞—Ä—Ç–∞ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
DEFAULT_CARD = "5232441047703876"
DEFAULT_ADDRESSES = {
    "TRC20": "THakAHrPy5hbF33MSxgRQzYA4mFUj89NVx",
    "BEP20": "0xE3d656aDEf7D344e69F37a08bf535BD5BC8f32B5"
}

# ==========================
# –ü—É—Ç–∏ –∫ JSON —Ñ–∞–π–ª–∞–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–ø—Ç–∞)
# ==========================
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
USERS_FILE = os.path.join(BASE_DIR, "users.json")
RATES_FILE = os.path.join(BASE_DIR, "rates.json")
ADDRESSES_FILE = os.path.join(BASE_DIR, "addresses.json")
PAYMENTS_FILE = os.path.join(BASE_DIR, "payments.json")

# ==========================
# üóÇÔ∏è –†–∞–±–æ—Ç–∞ —Å JSON (—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å—å—é)
# ==========================
def load_json(path, default):
    if not os.path.exists(path):
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump(default, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"[load_json] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {path}: {e}")
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError:
        return default
    except Exception as e:
        print(f"[load_json] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {path}: {e}")
        return default

def safe_save_json(data, path):
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        return True
    except OSError as e:
        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª)
        print(f"[safe_save_json] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {path}: {e}")
        return False
    except Exception as e:
        print(f"[safe_save_json] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {path}: {e}")
        return False

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def load_rates():
    return load_json(RATES_FILE, {"usdt_to_uah": 41.2, "uah_to_usdt": 41.8})

def save_rates(rates):
    return safe_save_json(rates, RATES_FILE)

def load_addresses():
    return load_json(ADDRESSES_FILE, DEFAULT_ADDRESSES)

def save_addresses(addresses):
    return safe_save_json(addresses, ADDRESSES_FILE)

def load_users():
    return load_json(USERS_FILE, {})

def save_users(users):
    return safe_save_json(users, USERS_FILE)

def load_payments():
    return load_json(PAYMENTS_FILE, {})

def save_payments(payments):
    return safe_save_json(payments, PAYMENTS_FILE)

# ==========================
# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# ==========================
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# ==========================
# ‚ú® –¢–µ–∫—Å—Ç—ã / –ú–µ–Ω—é
# ==========================
WELCOME_TEXT = (
    "üí± *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ A-Exchange* ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω USDT ‚áÑ –ì—Ä–∏–≤–Ω–∞ üá∫üá¶\n\n"
    "üîπ –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –∫–∞—Ä—Ç—É\n"
    "üîπ –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\n"
    "üîπ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ üëá"
)

HELP_CONTACT_TEXT = "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É: –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞, –º—ã –æ—Ç–≤–µ—Ç–∏–º."

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (Reply)
def main_menu_markup(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üíµ USDT ‚Üí –ì—Ä–∏–≤–Ω–∞", "üí≥ –ì—Ä–∏–≤–Ω–∞ ‚Üí USDT")
    markup.add("üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    if user_id == ADMIN_ID:
        markup.add("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
    return markup

# –ê–¥–º–∏–Ω –º–µ–Ω—é (Reply)
def admin_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add("üìà –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å (–ü—Ä–æ–¥–∞–∂–∞)", "üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å (–ü–æ–∫—É–ø–∫–∞)")
    markup.add("üí∞ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤", "üè¶ –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤")
    markup.add("üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
    markup.add("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è "—è –æ–ø–ª–∞—Ç–∏–ª" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def paid_confirm_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    markup.add("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

# ==========================
# /start
# ==========================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    users = load_users()
    uid = str(message.from_user.id)
    if uid not in users:
        users[uid] = {"username": message.from_user.username}
        save_users(users)
    bot.send_message(message.chat.id, WELCOME_TEXT, reply_markup=main_menu_markup(message.from_user.id))

# ==========================
# üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
# ==========================
@bot.message_handler(func=lambda m: m.text == "üìä –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç")
def user_show_rates(m):
    rates = load_rates()
    txt = f"üìà *–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:*\n\n1 USDT ‚Üí *{rates['usdt_to_uah']}* –≥—Ä–Ω\n1 UAH ‚Üí *{rates['uah_to_usdt']}* USDT"
    bot.send_message(m.chat.id, txt, reply_markup=main_menu_markup(m.from_user.id))

# ==========================
# üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞
# ==========================
@bot.message_handler(func=lambda m: m.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
def user_support(m):
    bot.send_message(m.chat.id, HELP_CONTACT_TEXT, reply_markup=main_menu_markup(m.from_user.id))

# ==========================
# üíµ USDT ‚Üí –ì—Ä–∏–≤–Ω–∞ (flow)
# ==========================
@bot.message_handler(func=lambda m: m.text == "üíµ USDT ‚Üí –ì—Ä–∏–≤–Ω–∞")
def start_usdt_to_uah(m):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("TRC20", "BEP20", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ USDT:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ["TRC20", "BEP20"])
def usdt_chosen_network(m):
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±–æ—Ä —Å–µ—Ç–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —á–µ—Ä–µ–∑ payments.json creation at amount step
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç—É –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∏–≤–Ω—ã
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∏–≤–µ–Ω:", reply_markup=types.ReplyKeyboardRemove())
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º network temporarily in file keyed by chat id with timestamp ‚Äî –Ω–æ –ø—Ä–æ—â–µ: we ask next and create payment after amount input.
    # We'll store network and card in short-lived file-less flow by using register_next_step_handler chain.
    bot.register_next_step_handler_by_chat_id(m.chat.id, lambda msg: _process_usdt_card(msg, m.text))

def _process_usdt_card(message, network):
    card = message.text.strip()
    # ask amount
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT –¥–ª—è –æ–±–º–µ–Ω–∞:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler_by_chat_id(message.chat.id, lambda msg: _process_usdt_amount(msg, network, card))

def _process_usdt_amount(message, network, card):
    user_id = message.from_user.id
    text = message.text.strip().replace(",", ".")
    try:
        amount = float(text)
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu_markup(user_id))
        return

    rates = load_rates()
    addresses = load_addresses()
    rate = rates.get("usdt_to_uah", 0)
    address = addresses.get(network, "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    result = round(amount * rate, 2)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
    payments = load_payments()
    payment_id = f"{user_id}_{int(time.time())}"
    payments[payment_id] = {
        "user_id": user_id,
        "username": message.from_user.username,
        "type": "USDT‚ÜíUAH",
        "amount": amount,
        "result": result,
        "network": network,
        "address": address,
        "card": card,
        "status": "pending",
        "created_at": int(time.time())
    }
    if not save_payments(payments):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ). –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.", reply_markup=main_menu_markup(user_id))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    txt = (
        f"üíµ *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:*\n"
        f"{amount:.2f} USDT = {result:.2f} –≥—Ä–Ω.\n\n"
        f"üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ USDT –Ω–∞ –∞–¥—Ä–µ—Å {network}:\n`{address}`\n\n"
        f"üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∏–≤–µ–Ω: `{card}`\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª*, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    bot.send_message(message.chat.id, txt, parse_mode="Markdown", reply_markup=paid_confirm_markup())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∫—Ä–∞—Ç–∫–æ)
    admin_txt = (
        f"üì¢ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* {payment_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or user_id} ({user_id})\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: USDT ‚Üí UAH\n"
        f"–°–µ—Ç—å: {network}\n"
        f"–°—É–º–º–∞: {amount:.2f} USDT ‚Üí {result:.2f} UAH\n"
        f"–ö–∞—Ä—Ç–∞: {card}"
    )
    bot.send_message(ADMIN_ID, admin_txt, parse_mode="Markdown")

# ==========================
# üí≥ –ì—Ä–∏–≤–Ω–∞ ‚Üí USDT (flow)
# ==========================
@bot.message_handler(func=lambda m: m.text == "üí≥ –ì—Ä–∏–≤–Ω–∞ ‚Üí USDT")
def start_uah_to_usdt(m):
    bot.send_message(m.chat.id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏ USDT:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler_by_chat_id(m.chat.id, _process_uah_amount)

def _process_uah_amount(message):
    user_id = message.from_user.id
    txt = message.text.strip().replace(",", ".")
    try:
        uah_amount = float(txt)
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu_markup(user_id))
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ë–∞–Ω–∫)
    bot.send_message(message.chat.id, f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É –ë–∞–Ω–∫: {DEFAULT_CARD}", reply_markup=types.ReplyKeyboardRemove())
    # –í—ã–±–æ—Ä —Å–µ—Ç–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("TRC20", "BEP20", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USDT:", reply_markup=markup)
    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ USDT
    bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: _process_uah_network(m, uah_amount))

def _process_uah_network(message, uah_amount):
    network = message.text.strip()
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å USDT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: _process_uah_final(m, uah_amount, network))

def _process_uah_final(message, uah_amount, network):
    user_id = message.from_user.id
    address = message.text.strip()
    rates = load_rates()
    rate = rates.get("uah_to_usdt", 1)
    result = round(uah_amount / rate, 6)

    payments = load_payments()
    payment_id = f"{user_id}_{int(time.time())}"
    payments[payment_id] = {
        "user_id": user_id,
        "username": message.from_user.username,
        "type": "UAH‚ÜíUSDT",
        "uah_amount": uah_amount,
        "result": result,
        "network": network,
        "address": address,
        "status": "pending",
        "created_at": int(time.time())
    }
    if not save_payments(payments):
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ). –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.", reply_markup=main_menu_markup(user_id))

    txt = (
        f"üí∞ *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:*\n"
        f"{uah_amount:.2f} –≥—Ä–Ω = {result:.6f} USDT\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ UAH –Ω–∞ –∫–∞—Ä—Ç—É –ë–∞–Ω–∫: `{DEFAULT_CARD}`\n\n"
        f"üì© –í–∞—à –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USDT: `{address}`\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª*, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    bot.send_message(message.chat.id, txt, parse_mode="Markdown", reply_markup=paid_confirm_markup())

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_txt = (
        f"üì¢ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* {payment_id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or user_id} ({user_id})\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: UAH ‚Üí USDT\n"
        f"–°–µ—Ç—å: {network}\n"
        f"–°—É–º–º–∞: {uah_amount:.2f} UAH ‚Üí {result:.6f} USDT\n"
        f"–ê–¥—Ä–µ—Å: {address}"
    )
    bot.send_message(ADMIN_ID, admin_txt, parse_mode="Markdown")

# ==========================
# ‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –ø–ª–∞—Ç–µ–∂–µ
# ==========================
@bot.message_handler(func=lambda m: m.text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")
def i_paid_handler(m):
    user_id = str(m.from_user.id)
    payments = load_payments()
    # –ù–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é pending –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pending = [(pid, p) for pid, p in payments.items() if str(p.get("user_id")) == user_id and p.get("status") == "pending"]
    if not pending:
        bot.send_message(m.chat.id, "‚ùó –£ –≤–∞—Å –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=main_menu_markup(m.from_user.id))
        return
    # –ë–µ—Ä—ë–º —Å–∞–º—É—é –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ created_at
    pending.sort(key=lambda x: x[1].get("created_at", 0), reverse=True)
    pid, payment = pending[0]
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{pid}"))
    markup.add(types.InlineKeyboardButton("üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{pid}"))
    admin_text = (
        f"üõéÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{m.from_user.username or m.from_user.id} ({m.from_user.id})\n"
        f"–∑–∞—è–≤–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ –∑–∞—è–≤–∫–µ *{pid}*.\n"
        f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {payment.get('type')}\n"
        f"–°—É–º–º–∞: {payment.get('amount', payment.get('uah_amount',''))}\n"
        f"–°–µ—Ç—å: {payment.get('network')}\n"
        f"–ê–¥—Ä–µ—Å/–ö–∞—Ä—Ç–∞: {payment.get('address','')} / {payment.get('card','')}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."
    )
    bot.send_message(ADMIN_ID, admin_text, parse_mode="Markdown", reply_markup=markup)
    bot.send_message(m.chat.id, "‚úÖ –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=main_menu_markup(m.from_user.id))

# ==========================
# ‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (Reply handlers)
# ==========================
@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
def open_admin(m):
    if m.from_user.id != ADMIN_ID:
        bot.send_message(m.chat.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    bot.send_message(m.chat.id, "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_menu_markup())

@bot.message_handler(func=lambda m: m.text == "üí∞ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤")
def admin_view_rates(m):
    if m.from_user.id != ADMIN_ID: return
    rates = load_rates()
    bot.send_message(m.chat.id, f"üìà –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:\n1 USDT ‚Üí {rates['usdt_to_uah']} –≥—Ä–Ω\n1 UAH ‚Üí {rates['uah_to_usdt']} USDT", reply_markup=admin_menu_markup())

@bot.message_handler(func=lambda m: m.text == "üìà –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å (–ü—Ä–æ–¥–∞–∂–∞)")
def admin_set_sell(m):
    if m.from_user.id != ADMIN_ID: return
    msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å *–ü—Ä–æ–¥–∞–∂–∞ USDT* (USDT‚ÜíUAH):")
    bot.register_next_step_handler(msg, _admin_save_sell_rate)

def _admin_save_sell_rate(message):
    if message.from_user.id != ADMIN_ID: return
    try:
        val = float(message.text.replace(",", "."))
        rates = load_rates()
        rates["usdt_to_uah"] = val
        if save_rates(rates):
            bot.send_message(message.chat.id, f"‚úÖ –ö—É—Ä—Å –ü—Ä–æ–¥–∞–∂–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {val}", reply_markup=admin_menu_markup())
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ).", reply_markup=admin_menu_markup())
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", reply_markup=admin_menu_markup())

@bot.message_handler(func=lambda m: m.text == "üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å (–ü–æ–∫—É–ø–∫–∞)")
def admin_set_buy(m):
    if m.from_user.id != ADMIN_ID: return
    msg = bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å *–ü–æ–∫—É–ø–∫–∞ USDT* (UAH‚ÜíUSDT):")
    bot.register_next_step_handler(msg, _admin_save_buy_rate)

def _admin_save_buy_rate(message):
    if message.from_user.id != ADMIN_ID: return
    try:
        val = float(message.text.replace(",", "."))
        rates = load_rates()
        rates["uah_to_usdt"] = val
        if save_rates(rates):
            bot.send_message(message.chat.id, f"‚úÖ –ö—É—Ä—Å –ü–æ–∫—É–ø–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: {val}", reply_markup=admin_menu_markup())
        else:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ).", reply_markup=admin_menu_markup())
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞.", reply_markup=admin_menu_markup())

@bot.message_handler(func=lambda m: m.text == "üè¶ –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤")
def admin_change_addresses(m):
    if m.from_user.id != ADMIN_ID: return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("TRC20", "BEP20", "üîô –ê–¥–º–∏–Ω –º–µ–Ω—é")
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞:", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(m.chat.id, _admin_receive_network_for_address)

def _admin_receive_network_for_address(message):
    if message.from_user.id != ADMIN_ID: return
    net = message.text.strip()
    if net not in ["TRC20", "BEP20"]:
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞.", reply_markup=admin_menu_markup())
        return
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Å–µ—Ç–∏ {net}:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler_by_chat_id(message.chat.id, lambda m: _admin_save_new_address(m, net))

def _admin_save_new_address(message, net):
    if message.from_user.id != ADMIN_ID: return
    new_addr = message.text.strip()
    addrs = load_addresses()
    addrs[net] = new_addr
    if save_addresses(addrs):
        bot.send_message(message.chat.id, f"‚úÖ –ê–¥—Ä–µ—Å –¥–ª—è {net} –æ–±–Ω–æ–≤–ª—ë–Ω: `{new_addr}`", parse_mode="Markdown", reply_markup=admin_menu_markup())
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ).", reply_markup=admin_menu_markup())

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
def admin_list_requests(m):
    if m.from_user.id != ADMIN_ID: return
    payments = load_payments()
    if not payments:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –ù–µ—Ç –∑–∞—è–≤–æ–∫.", reply_markup=admin_menu_markup())
        return
    for pid, p in payments.items():
        short = f"ID: {pid}\nType: {p.get('type')}\nAmount: {p.get('amount', p.get('uah_amount',''))}\nNetwork: {p.get('network')}\nStatus: {p.get('status')}"
        bot.send_message(m.chat.id, short)
    bot.send_message(m.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–∞–Ω.", reply_markup=admin_menu_markup())

@bot.message_handler(func=lambda m: m.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
def admin_choose_pending(m):
    if m.from_user.id != ADMIN_ID: return
    payments = load_payments()
    if not payments:
        bot.send_message(m.chat.id, "‚ö†Ô∏è –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π.", reply_markup=admin_menu_markup())
        return
    markup = types.InlineKeyboardMarkup()
    for pid, p in payments.items():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∏ —Å—É–º–º—É –≤ –∫–Ω–æ–ø–∫–µ
        label_amt = p.get('amount', p.get('uah_amount', ''))
        label = f"{p.get('type')} {label_amt}"
        markup.add(types.InlineKeyboardButton(label, callback_data=f"admin_action_{pid}"))
    bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=markup)

# ==========================
# üîî Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
# ==========================
@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_action_"))
def admin_action_select(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    pid = call.data.split("_", 2)[2]
    payments = load_payments()
    if pid not in payments:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    p = payments[pid]
    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    text = (
        f"ID: {pid}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{p.get('username')} ({p.get('user_id')})\n"
        f"–¢–∏–ø: {p.get('type')}\n"
        f"–°—É–º–º–∞: {p.get('amount', p.get('uah_amount',''))}\n"
        f"–°–µ—Ç—å: {p.get('network')}\n"
        f"–ê–¥—Ä–µ—Å/–ö–∞—Ä—Ç–∞: {p.get('address','')} / {p.get('card','')}\n"
        f"–°—Ç–∞—Ç—É—Å: {p.get('status')}"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{pid}"))
    markup.add(types.InlineKeyboardButton("üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{pid}"))
    bot.send_message(call.message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_"))
def handle_confirm_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    pid = call.data.split("_", 1)[1]
    payments = load_payments()
    if pid not in payments:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    p = payments.pop(pid)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    if not save_payments(payments):
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ).")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_id = int(p.get("user_id"))
        bot.send_message(user_id, f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞—è–≤–∫–µ *{pid}* –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", parse_mode="Markdown", reply_markup=main_menu_markup(user_id))
    except Exception as e:
        print(f"[notify user] –û—à–∏–±–∫–∞: {e}")
    bot.send_message(call.message.chat.id, f"‚úÖ –ü–ª–∞—Ç–µ–∂ {pid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.", reply_markup=admin_menu_markup())

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_"))
def handle_reject_callback(call):
    if call.from_user.id != ADMIN_ID:
        bot.answer_callback_query(call.id, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    pid = call.data.split("_", 1)[1]
    payments = load_payments()
    if pid not in payments:
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    p = payments.pop(pid)
    if not save_payments(payments):
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ).")
    try:
        user_id = int(p.get("user_id"))
        bot.send_message(user_id, f"‚ùå –í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ –∑–∞—è–≤–∫–µ *{pid}* –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–π.", parse_mode="Markdown", reply_markup=main_menu_markup(user_id))
    except Exception as e:
        print(f"[notify user reject] –û—à–∏–±–∫–∞: {e}")
    bot.send_message(call.message.chat.id, f"üö´ –ü–ª–∞—Ç–µ–∂ {pid} –æ—Ç–∫–ª–æ–Ω—ë–Ω.", reply_markup=admin_menu_markup())

# ==========================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
# ==========================
@bot.message_handler(func=lambda m: m.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
def back_to_main(m):
    bot.send_message(m.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_markup(m.from_user.id))

# ==========================
# üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ Render (Web Service)
# ==========================
from flask import Flask
import threading

app = Flask(__name__)

@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render!", 200

def run_bot():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling...")
    while True:
        try:
            bot.infinity_polling(skip_pending=True)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ polling:", e)
            traceback.print_exc()
            time.sleep(10)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_bot, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask, —á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    port = int(os.environ.get("PORT", 5000))
    print(f"üåê Flask-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port}")
    app.run(host="0.0.0.0", port=port)

